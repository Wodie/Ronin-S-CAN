// Arduino Ronin sACN RCU v1.0 Program.

#include <Arduino.h>
#include "Fixture_Lib.h"
#include <Servo.h>
#include "DJI_Ronin_crc16.h"

#include <SPI.h>

extern "C" {
	#include "DJI_CAN.h"
}


/////////////////////////////////////////////////////////////////////////////////////////////////////
// About:
// Ronin CAN RCU v1.0.0
// Released: Apr 17, 2020. Created: December 30, 2019.
// Created by:
// WLPS Wodielite Production Services
// Juan Carlos PÃ©rez De Castro (Wodie)
// www.wodielite.com
// wodielite at mac.com
/////////////////////////////////////////////////////////////////////////////////////////////////////

// To do:
// Implement CAN
// Implement Ronin CAN protocol basic commands
// Implement Control channel
// Implement Mode channel
// Implement Camera channel
// Implement Focus channel
// Implement Zoom channel

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Program Definitions ***********************************************************************
/////////////////////////////////////////////////////////////////////////////////////////////////////
int ledState = LOW; // ledState used to set the LED

// Analog Input Pins.
int FocusDemmandPin = A0;

// RAM
uint16_t Pan;	// 1
uint16_t Tilt; // 2
uint16_t Aux3;
uint16_t Roll; // 4
uint8_t Mode;
uint8_t Control;
uint16_t Focus;
uint16_t Iris;
uint16_t Zoom;

// DJI Ronin CAN
uint16_t DJI_TxSequence;

// CAN
#define CAN_2515
#ifdef CAN_2515
	#include "mcp2515_can.h"
	const int SPI_CS_PIN = 9;
	const int CAN_INT_PIN = 2;
	mcp2515_can CAN(SPI_CS_PIN); // Set CS pin
#endif

uint32_t FocusWheel_Time = 0;
uint16_t FocusWheelSequence = 0;

//Misc.
uint32_t TickCount;
uint32_t Status_Time;


//*****************************************************************************
// Setup **********************************************************************
//*****************************************************************************
void setup() {
	// serial to display the channel commands for debugging
	//Serial.begin(9600);
	Serial.begin(115200);
	while (!Serial) {;}; // wait for serial port to connect. Needed for native USB port only
//	delay(1000);
	Serial.print("*** Setup() ***\n");
	// put your setup code here, to run once:
	pinMode(LED_BUILTIN, OUTPUT);
	
	//Default Values
	Pan = 32768; // (DMX 16 bit value)
	Tilt = 32768; // (DMX 16 bit value)
	Aux3 = 32768; // (DMX 16 bit value)
	Roll = 32768; // (DMX 16 bit value)
	Mode = 127; // (DMX 8 bit value)
	Control = 0; // (DMX 8 bit value)
	Focus = 0; // (DMX 16 bit value)
	Iris = 0; // (DMX 16 bit value)
	Zoom = 0; // (DMX 16 bit value)

	// Init. CAN
	while (CAN_OK != CAN.begin(CAN_1000KBPS)) { // init can bus : baudrate = 1000k
		Serial.println("CAN BUS Shield init fail");
		Serial.println(" Init CAN BUS Shield again");
		delay(100);
	}
	Serial.println("CAN BUS Shield init ok!");

	// Mask
	CAN.init_Mask(0, 0, 0x000);												 // there are 2 mask in mcp2515, you need to set both of them
	CAN.init_Filt(0, 0, 0x00);													// there are 6 filter in mcp2515
	CAN.init_Filt(1, 0, 0x00);													// there are 6 filter in mcp2515
	//
	CAN.init_Mask(1, 0, 0x000);
	CAN.init_Filt(2, 0, 0x00);													// there are 6 filter in mcp2515
	CAN.init_Filt(3, 0, 0x00);													// there are 6 filter in mcp2515
	CAN.init_Filt(4, 0, 0x00);													// there are 6 filter in mcp2515
	CAN.init_Filt(5, 0, 0x00);													// there are 6 filter in mcp2515




	TestRonin();

}

//*****************************************************************************
// Main Loop ******************************************************************
//*****************************************************************************
void loop() {
	//Serial.print("*** Loop() ***\n");
	TickCount = millis();
	if ((TickCount - Status_Time) >= 33) {
		Status_Time = TickCount;
		//Process every 33 ms.
		// Heart beat LED, if the LED is off turn it on and vice-versa:
		if (ledState == LOW) {
			ledState = HIGH;
		} else {
			ledState = LOW;
		}
		// set the LED with the ledState of the variable:
		digitalWrite(LED_BUILTIN, ledState);
	}


	RoninRx();

//	FocusWheelTimer();

}








//*****************************************************************************
// Test Ronin *****************************************************************
//*****************************************************************************
uint8_t CANBuffer[0x100];
uint8_t CANBufferLen = 0;
uint8_t CANByteOffset = 0;
uint16_t CANRxID = 0;

void RoninRx (void) {
	unsigned long ID = 0;
	unsigned char Buffer[100];
	uint8_t BufferLen = 0;
	if (CAN_MSGAVAIL == CAN.checkReceive()) {
		CAN.readMsgBufID(&ID, &BufferLen, Buffer);	
		CANRxID = ID;
//*******************************************************************
		if (ID == 0x012) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
//					Serial.print("ID: 0x");
//					Serial.print(ID, HEX);// print the data
//					Serial.print("\tLen 0x");
//					Serial.print(CANBufferLen, HEX);
//					Serial.print("\t");
//					for (int i = 0; i < CANBufferLen; i++) {
//						Serial.print("0x");
//						Serial.print(CANBuffer[i], HEX);
//						Serial.print(" ");
//					}
//					Serial.println();
				}
			}
			return;
		}
//*******************************************************************
		if (ID == 0x021) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1];
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
//					Serial.print("ID: 0x");
//					Serial.print(ID, HEX);// print the data
//					Serial.print("\tLen 0x");
//					Serial.print(CANBufferLen, HEX);
//					Serial.print("\t");
//					for (int i = 0; i < CANBufferLen; i++) {
//						Serial.print("0x");
//						Serial.print(CANBuffer[i], HEX);
//						Serial.print(" ");
//					}
//					Serial.println();
				}
			}
			return;
		}
//*******************************************************************
		if (ID == 0x416) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
//					Serial.print("ID: 0x");
//					Serial.print(ID, HEX);// print the data
//					Serial.print("\tLen 0x");
//					Serial.print(CANBufferLen, HEX);
//					Serial.print("\t");
//					for (int i = 0; i < CANBufferLen; i++) {
//						Serial.print("0x");
//						Serial.print(CANBuffer[i], HEX);
//						Serial.print(" ");
//					}
//					Serial.println();
				}
			}
			return;
		}
//*******************************************************************
		if (ID == 0x417) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
//					Serial.print("ID: 0x");
//					Serial.print(ID, HEX);// print the data
//					Serial.print("\tLen 0x");
//					Serial.print(CANBufferLen, HEX);
//					Serial.print("\t");
//					for (int i = 0; i < CANBufferLen; i++) {
//						Serial.print("0x");
//						Serial.print(CANBuffer[i], HEX);
//						Serial.print(" ");
//					}
//					Serial.println();
				}
			}
			return;
		}
//*******************************************************************
		if (ID == 0x503) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
//					Serial.print("ID: 0x");
//					Serial.print(ID, HEX);// print the data
//					Serial.print("\tLen 0x");
//					Serial.print(CANBufferLen, HEX);
//					Serial.print("\t");
//					for (int i = 0; i < CANBufferLen; i++) {
//						Serial.print("0x");
//						Serial.print(CANBuffer[i], HEX);
//						Serial.print(" ");
//					}
//					Serial.println();
				}
			}
			return;
		}
// Focus Servo Reply *******************************************************************
		if (ID == 0x504) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
//					Serial.print("ID: 0x");
//					Serial.print(ID, HEX);// print the data
//					Serial.print("\tLen 0x");
//					Serial.print(CANBufferLen, HEX);
//					Serial.print("\t");
//					for (int i = 13; i < CANBufferLen - 1; i++) {
//						Serial.print("0x");
//						Serial.print(CANBuffer[i], HEX);
//						Serial.print(" ");
//					}
//					Serial.println();
					// 0x55 0x14 0x4 0x6D 0xBF 0x26 0x0 0x0 0x1C 0x4 0x2F 0x9 0x0 0x0 0xE6 0x9 0x0 0x0 0xC8 0x99 a valid frame
				}
			}
			return;
		}
// Iris Servo Reply *******************************************************************
		if (ID == 0x506) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
					Serial.print("ID: 0x");
					Serial.print(ID, HEX);// print the data
					Serial.print("\tLen 0x");
					Serial.print(CANBufferLen, HEX);
					Serial.print("\t");
					for (int i = 0; i < CANBufferLen; i++) {
						Serial.print("0x");
						Serial.print(CANBuffer[i], HEX);
						Serial.print(" ");
					}
					Serial.println();
				}
			}
			return;
		}
// Zoom Servo Reply *******************************************************************
		if (ID == 0x508) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
					Serial.print("ID: 0x");
					Serial.print(ID, HEX);// print the data
					Serial.print("\tLen 0x");
					Serial.print(CANBufferLen, HEX);
					Serial.print("\t");
					for (int i = 0; i < CANBufferLen; i++) {
						Serial.print("0x");
						Serial.print(CANBuffer[i], HEX);
						Serial.print(" ");
					}
					Serial.println();
				}
			}
			return;
		}
// Focus Wheel Tx *******************************************************************
		if (ID == 0x530) {
			if (Buffer[0] == 0x55) {
				uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				//Serial.println();
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
//					Serial.print("ID: 0x");
//					Serial.print(ID, HEX);// print the data
//					Serial.print("\tLen 0x");
//					Serial.print(CANBufferLen, HEX);
//					Serial.print("\t");
//					for (int i = 0; i < CANBufferLen; i++) {
//						Serial.print("0x");
//						Serial.print(CANBuffer[i], HEX);
//						Serial.print(" ");
//					}
//					Serial.println();
				}
			}
			return;
		}
//*******************************************************************
		if (ID == 0x531) {
			if (Buffer[0] == 0x55) {
				//uint16_t FrameCount = (Buffer[7] << 8) | Buffer[6];
				//Serial.print(FrameCount, HEX);// print the data
				CANBufferLen = Buffer[1] & 0x3F;
				CANByteOffset = 0;
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i] = Buffer[i];
				}
				CANByteOffset = BufferLen;
			} else {
				for (int i = 0; i < BufferLen; i++) {
					CANBuffer[i + CANByteOffset] = Buffer[i];
				}
				CANByteOffset = CANByteOffset + BufferLen;
				if (CANByteOffset == CANBufferLen) {
					// Print Frame.
//					Serial.print("ID: 0x");
//					Serial.print(ID, HEX);// print the data
//					Serial.print("\tLen 0x");
//					Serial.print(CANBufferLen, HEX);
//					Serial.print("\t");
//					for (int i = 0; i < CANBufferLen; i++) {
//						Serial.print("0x");
//						Serial.print(CANBuffer[i], HEX);
//						Serial.print(" ");
//					}
//					Serial.println();
				}
			}
			return;
		}
//*******************************************************************
		Serial.print("Unknown ID: 0x");
		Serial.print(ID, HEX);// print the data
		Serial.println();
//*******************************************************************
	}	
}





void FocusWheelTimer(void) {
	uint8_t Buffer[0x22];
	uint8_t FrameSize = 0x12;
	if ((TickCount - FocusWheel_Time) >= 33) {
		FocusWheel_Time = TickCount;
		//Process every 33 ms (30 Hz).
		
		// Focus analog test
		int FocusValue = map(analogRead(FocusDemmandPin), 0, 1023, 0, 0x0FFF);
//		Serial.print("F=");
//		Serial.print(FocusValue);
//		Serial.print("\n");
	
		Buffer[0] = 0x55;
		Buffer[1] = FrameSize;
		Buffer[2] = 0x04;
		Buffer[3] = 0xC7;
		Buffer[4] = 0x26;
		Buffer[5] = 0xBF;
		// 6 & 7 Sequence
		if (FocusWheelSequence < 65535) {
			FocusWheelSequence++;
		} else {
			FocusWheelSequence = 0;
		}
		Buffer[6] = FocusWheelSequence & 0xFF;
		Buffer[7] = (FocusWheelSequence & 0xFF00) >> 8; // LSB byte first.

//		Buffer[6] = 0xF4; // Sequence development constants
//		Buffer[7] = 0x8C; // Sequence development constants

		Buffer[8] = 0x00;
		Buffer[9] = 0x04;
		Buffer[10] = 0x2F;
		Buffer[11] = 0x01;
		Buffer[12] = 0x00;
		
		Buffer[13] = 0x02; // Dialer controller

		Buffer[14] = FocusValue & 0xFF; // Focus MSB.
		Buffer[15] = (FocusValue & 0xFF00) >> 8; // Focus LSB.

//		Buffer[14] = 0x01; // Focus MSB development constants.
//		Buffer[15] = 0x00; // Focus LSB development constants.

		// 16 & 17 CRC 16
		crc16_t crc16;
		crc16 = crc16_init(); // Init CRC16 class.
		crc16 = crc16_update(crc16, (void *)Buffer, FrameSize - 2);
		Serial.print("CRC16 ");
		Serial.println(crc16, HEX);
		Buffer[16] = crc16 & 0xFF; // LSB byte first.
		Buffer[17] = (crc16 & 0xFF00) >> 8;
		crc16 = crc16_finalize(crc16); // Destroy CRC16 class.


		for(uint8_t i = 0; i < FrameSize; i++) {
			Serial.print(Buffer[i], HEX); // print the channel command (172-1811)
			Serial.print(" ");
		}
		Serial.println();
		CAN.sendMsgBuf(0x530, StandardFrame, 0x08, Buffer);
		CAN.sendMsgBuf(0x530, StandardFrame, 0x08, Buffer + 0x08);
		CAN.sendMsgBuf(0x530, StandardFrame, 0x02, Buffer + 0x10);
//		Serial.println("FocusWheel emulation sent ok!");
		//    1    2   3    4    5    6    7    8   9  10  11   12  13  14  15  16   17   18 
		// 0x55 0x12 0x4 0xC7 0x26 0xBF 0xF4 0x8C 0x0 0x4 0x2F 0x1 0x0 0x2 0x1 0x0 0x6D 0xD3 // Valid sample frame
		// 55 12 04 C7 0x26 0xBF F4 8C 00 04 2F 01 00 02 01 00 6D D3 // Valid sample frame
		// 551204C726BFF48C00042F0100020100 6DD3 // Valid sample frame
	}
	
	
}


//*****************************************************************************
// DJI CRC16 ******************************************************************
//*****************************************************************************
/**
 * Static table used for the table_driven implementation.
 */
static const crc16_t crc16_table[256] = {
		0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241,
		0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440,
		0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40,
		0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841,
		0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40,
		0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,
		0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641,
		0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040,
		0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240,
		0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441,
		0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41,
		0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,
		0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41,
		0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40,
		0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640,
		0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041,
		0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240,
		0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,
		0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41,
		0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840,
		0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41,
		0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40,
		0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640,
		0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,
		0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241,
		0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440,
		0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40,
		0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841,
		0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40,
		0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,
		0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641,
		0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040
};

crc16_t crc16_update(crc16_t crc, const void *data, size_t data_len) {
		const unsigned char *d = (const unsigned char *)data;
		unsigned int tbl_idx;

		while (data_len--) {
				tbl_idx = (crc ^ *d) & 0xff;
				crc = (crc16_table[tbl_idx] ^ (crc >> 8)) & 0xffff;
				d++;
		}
		return crc & 0xffff;
}


